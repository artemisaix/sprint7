[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "plotly.express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.express",
        "description": "plotly.express",
        "detail": "plotly.express",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "vehicles_env.bin.activate_this",
        "description": "vehicles_env.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "vehicles_env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "car_data",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data = pd.read_csv('vehicles_us.csv')\n# Limpieza de datos\n# Fill NA values\ncar_data['model_year'] = car_data['model_year'].fillna(\n    car_data['model_year'].mean())\ncar_data['odometer'] = car_data['odometer'].fillna(car_data['odometer'].mean())\ncar_data['cylinders'] = car_data['cylinders'].fillna(\n    round(car_data['cylinders'].mean()))\n# Convertir a enteros\ncar_data['model_year'] = car_data['model_year'].astype(int)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['model_year']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['model_year'] = car_data['model_year'].fillna(\n    car_data['model_year'].mean())\ncar_data['odometer'] = car_data['odometer'].fillna(car_data['odometer'].mean())\ncar_data['cylinders'] = car_data['cylinders'].fillna(\n    round(car_data['cylinders'].mean()))\n# Convertir a enteros\ncar_data['model_year'] = car_data['model_year'].astype(int)\ncar_data['odometer'] = car_data['odometer'].astype(int)\n# Convertir date_posted a formato datetime\ncar_data['date_posted'] = pd.to_datetime(car_data['date_posted'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['odometer']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['odometer'] = car_data['odometer'].fillna(car_data['odometer'].mean())\ncar_data['cylinders'] = car_data['cylinders'].fillna(\n    round(car_data['cylinders'].mean()))\n# Convertir a enteros\ncar_data['model_year'] = car_data['model_year'].astype(int)\ncar_data['odometer'] = car_data['odometer'].astype(int)\n# Convertir date_posted a formato datetime\ncar_data['date_posted'] = pd.to_datetime(car_data['date_posted'])\n# Eliminar duplicados\ncar_data.drop_duplicates(inplace=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['cylinders']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['cylinders'] = car_data['cylinders'].fillna(\n    round(car_data['cylinders'].mean()))\n# Convertir a enteros\ncar_data['model_year'] = car_data['model_year'].astype(int)\ncar_data['odometer'] = car_data['odometer'].astype(int)\n# Convertir date_posted a formato datetime\ncar_data['date_posted'] = pd.to_datetime(car_data['date_posted'])\n# Eliminar duplicados\ncar_data.drop_duplicates(inplace=True)\n# Rellenar NA en paint_color con \"No Specified\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['model_year']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['model_year'] = car_data['model_year'].astype(int)\ncar_data['odometer'] = car_data['odometer'].astype(int)\n# Convertir date_posted a formato datetime\ncar_data['date_posted'] = pd.to_datetime(car_data['date_posted'])\n# Eliminar duplicados\ncar_data.drop_duplicates(inplace=True)\n# Rellenar NA en paint_color con \"No Specified\"\ncar_data['paint_color'] = car_data['paint_color'].fillna('No Specified')\n# Rellenar NA en is_4wd con 0\ncar_data['is_4wd'] = car_data['is_4wd'].fillna(0)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['odometer']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['odometer'] = car_data['odometer'].astype(int)\n# Convertir date_posted a formato datetime\ncar_data['date_posted'] = pd.to_datetime(car_data['date_posted'])\n# Eliminar duplicados\ncar_data.drop_duplicates(inplace=True)\n# Rellenar NA en paint_color con \"No Specified\"\ncar_data['paint_color'] = car_data['paint_color'].fillna('No Specified')\n# Rellenar NA en is_4wd con 0\ncar_data['is_4wd'] = car_data['is_4wd'].fillna(0)\n# Título de la aplicación",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['date_posted']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['date_posted'] = pd.to_datetime(car_data['date_posted'])\n# Eliminar duplicados\ncar_data.drop_duplicates(inplace=True)\n# Rellenar NA en paint_color con \"No Specified\"\ncar_data['paint_color'] = car_data['paint_color'].fillna('No Specified')\n# Rellenar NA en is_4wd con 0\ncar_data['is_4wd'] = car_data['is_4wd'].fillna(0)\n# Título de la aplicación\nst.title(\"Análisis de anuncios de venta de coches\")\nst.header(\"Histograma del odómetro\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['paint_color']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['paint_color'] = car_data['paint_color'].fillna('No Specified')\n# Rellenar NA en is_4wd con 0\ncar_data['is_4wd'] = car_data['is_4wd'].fillna(0)\n# Título de la aplicación\nst.title(\"Análisis de anuncios de venta de coches\")\nst.header(\"Histograma del odómetro\")\nhist_button = st.button('Construir histograma')  # crear un botón\nif hist_button:\n    st.write(\n        'Creación de un histograma para el conjunto de datos de anuncios de venta de coches')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "car_data['is_4wd']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "car_data['is_4wd'] = car_data['is_4wd'].fillna(0)\n# Título de la aplicación\nst.title(\"Análisis de anuncios de venta de coches\")\nst.header(\"Histograma del odómetro\")\nhist_button = st.button('Construir histograma')  # crear un botón\nif hist_button:\n    st.write(\n        'Creación de un histograma para el conjunto de datos de anuncios de venta de coches')\n    fig = px.histogram(car_data, x=\"odometer\")\n    st.plotly_chart(fig, use_container_width=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "hist_button",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "hist_button = st.button('Construir histograma')  # crear un botón\nif hist_button:\n    st.write(\n        'Creación de un histograma para el conjunto de datos de anuncios de venta de coches')\n    fig = px.histogram(car_data, x=\"odometer\")\n    st.plotly_chart(fig, use_container_width=True)\nst.header(\"Scatterplot: Odómetro vs Precio\")\ndisp_button = st.button('Construir Scatterplot')\nif disp_button:\n    st.write(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "disp_button",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "disp_button = st.button('Construir Scatterplot')\nif disp_button:\n    st.write(\n        'Creación de un scatterplot para el conjunto de datos de anuncios de venta de coches')\n    fig = px.scatter(car_data, x=\"odometer\", y=\"price\")\n    st.plotly_chart(fig, use_container_width=True)\nst.header(\"Casillas de Verificación\")\nbuild_histogram = st.checkbox('Mostrar Autos mas vendidos')\nif build_histogram:\n    st.write(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "build_histogram",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "build_histogram = st.checkbox('Mostrar Autos mas vendidos')\nif build_histogram:\n    st.write(\n        'Lista de los tipos de Autos mas vendidos')\n    top_10_types = car_data['type'].value_counts().nlargest(\n        10).reset_index()\n    top_10_types.columns = ['type', 'count']\n    fig = px.bar(top_10_types, x='type', y='count',\n                 title=\"Top 10 Años de Modelo Más Vendidos\")\n    fig.update_layout(xaxis_title=\"Año de Modelo\",",
        "detail": "app",
        "documentation": {}
    }
]